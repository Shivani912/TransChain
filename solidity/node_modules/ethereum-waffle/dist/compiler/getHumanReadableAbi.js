"use strict";
exports.__esModule = true;
function getHumanReadableAbi(abi) {
    return abi
        .filter(function (entry) { return ['function', 'constructor', 'event'].includes(entry.type); })
        .map(function (entry) {
        switch (entry.type) {
            case 'function': return encodeFunction(entry);
            case 'constructor': return encodeConstructor(entry);
            case 'event': return encodeEvent(entry);
            default: throw new TypeError('Unrecognized entry type');
        }
    });
}
exports.getHumanReadableAbi = getHumanReadableAbi;
function encodeFunction(entry) {
    var declaration = "function " + entry.name + "(" + encodeInputs(entry.inputs) + ")";
    if (entry.stateMutability !== 'nonpayable') {
        declaration += " " + entry.stateMutability;
    }
    return declaration + encodeOutputs(entry.outputs);
}
function encodeConstructor(entry) {
    return "constructor(" + encodeInputs(entry.inputs) + ")";
}
function encodeEvent(entry) {
    return "event " + entry.name + "(" + encodeInputs(entry.inputs) + ")";
}
function encodeInputs(inputs) {
    if (!inputs || inputs.length === 0) {
        return '';
    }
    return inputs
        .map(function (input) {
        if (input.indexed) {
            return input.type + " indexed " + input.name;
        }
        return input.type + " " + input.name;
    })
        .join(', ');
}
function encodeOutputs(outputs) {
    if (!outputs || outputs.length === 0) {
        return '';
    }
    var returns = outputs
        .map(function (output) {
        if (output.name !== '') {
            return output.type + " " + output.name;
        }
        return output.type;
    })
        .join(', ');
    return " returns(" + returns + ")";
}
